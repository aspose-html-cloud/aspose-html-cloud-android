plugins {
    id 'com.android.library'
}


android {
    compileSdk 32

    defaultConfig {
        minSdk 26
        targetSdk 32
        buildConfigField "long", "TIMEOUT", "${1000 * 60 * 30}" // 30 minutes
        buildConfigField "String", "VERSION_HEADER", "\"aspose.html-cloud android sdk\""
        buildConfigField "String", "VERSION_NUMBER", "\"22.9.1\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.aspose.html.android'
}
tasks.withType(Test) {
    useJUnitPlatform()
    jvmArgs '--enable-preview'
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
        task.description = "Create jar artifact for ${variant.name}"
        task.dependsOn variant.javaCompileProvider.get()
        task.from variant.javaCompileProvider.get().destinationDir
        task.destinationDirectory = project.file("${project.buildDir}/outputs/jar")
        task.archiveFileName = "${project.name}-${variant.baseName}-${version}.jar"
        artifacts.add('archives', task)
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {

    doFirst {
        configurations.implementation
                .filter { it.name.endsWith('.aar') }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                    }
                }
    }

    configurations.implementation.setCanBeResolved(true)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    failOnError false
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'io.gsonfire:gson-fire:1.8.0'
    implementation 'org.threeten:threetenbp:1.3.5'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
}