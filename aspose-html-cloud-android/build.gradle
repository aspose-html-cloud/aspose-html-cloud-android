apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.1'
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        buildConfigField "long", "TIMEOUT", "${1000 * 60 * 30}" // 30 minutes
        buildConfigField "String", "VERSION_HEADER", "\"aspose.html-cloud android sdk\""
        buildConfigField "String", "VERSION_NUMBER", "\"${version}\""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Rename the aar correctly
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFileName.endsWith('.aar')) {
                def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                outputFileName = new File("../build/", fileName)
            }
        }
    }

    dependencies {
        compileOnly 'javax.annotation:jsr250-api:1.0'
    }
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
        task.description = "Create jar artifact for ${variant.name}"
        task.dependsOn variant.javaCompileProvider.get()
        task.from variant.javaCompileProvider.get().destinationDir
        task.destinationDirectory = project.file("${project.buildDir}/outputs/jar")
        task.archiveFileName = "${project.name}-${variant.baseName}-${version}.jar"
        artifacts.add('archives', task)
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {

    doFirst {
        configurations.implementation
                .filter { it.name.endsWith('.aar') }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                    }
                }
    }

    configurations.implementation.setCanBeResolved(true)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    failOnError false
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task writeNewPom {
    doLast {
        pom {
            project {
                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$buildDir/libs/${project.name}-${version}.pom")
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'io.swagger:swagger-annotations:1.5.15'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'io.gsonfire:gson-fire:1.8.0'
    implementation 'org.threeten:threetenbp:1.3.5'
}
